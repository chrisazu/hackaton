@page "/goals/add"

@using HealthyApp.Models.Requests;
@using System.Linq.Expressions;
@using System.Reflection;
@using System.ComponentModel;
@using HealthyApp.Services.Interfaces;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Http

@inject SignInManager<IdentityUser> _signInManager
@inject IHealthyUserService _healthyUserService
@inject NavigationManager NavigationManager
@inject IGoalService _goalService
@inject IHttpContextAccessor httpContextAccessor

<h2>Agregar objetivo</h2>
<hr />
<EditForm Model="model" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="Type" class="form-label">Tipo</label>
        <div class="col-md-2">
            <InputSelect id="Type" class="form-select" @bind-Value="model.Type">
                <option selected value="1">Hacer ejercicio</option>
                <option value="2">Bajar de peso</option>
                <option value="3">Meditar</option>
            </InputSelect>
        </div>
    </div>
    <div class="mb-3">
        <label for="Name" class="form-label">Nombre</label>
        <div class="col-md-2">
            <InputText id="Name" class="form-control" @bind-Value="model.Name" />
        </div>
        <ValidationMessage For="@(() => model.Name)" />
    </div>
    <div class="mb-3">
        <label for="Description" class="form-label">Descripción</label>
        <div class="col-md-2">
            <InputTextArea id="Description" class="form-control" @bind-Value="model.Description" />
        </div>
        <ValidationMessage For="@(() => model.Description)" />
    </div>

    @if (model.Type == 2)
    {
        <div class="mb-3">
            <label for="Kilograms" class="form-label">Kilos</label>
            <div class="col-md-2">
                <InputNumber id="Kilograms" class="form-control" @bind-Value="model.Kilograms" />
            </div>
            <ValidationMessage For="@(() => model.Kilograms)" />
        </div>
    }
    else
    {
        <div class="mb-3">
            <label for="DurationInMinutes" class="form-label">Duración (en minutos)</label>
            <div class="col-md-2">
                <InputNumber id="DurationInMinutes" class="form-control" @bind-Value="model.DurationInMinutes" />
            </div>
            <ValidationMessage For="@(() => model.DurationInMinutes)" />
        </div>
        <div class="mb-3">
            <label for="Frequency" class="form-label">Frecuencia</label>
            <div class="col-md-2">
                <InputSelect id="Frequency" class="form-select" @bind-Value="model.Frequency">
                    <option selected value="1">Diario</option>
                    <option value="2">Semanal</option>
                    <option value="3">Mensual</option>
                    <option value="4">Anual</option>
                </InputSelect>
            </div>
        </div>
        <div class="mb-3">
            <label for="TimesPerFrequency" class="form-label">Tiempo de frecuencia</label>
            <div class="col-md-2">
                <InputNumber id="TimesPerFrequency" class="form-control" @bind-Value="model.TimesPerFrequency" />
            </div>
            <ValidationMessage For="@(() => model.TimesPerFrequency)" />
        </div>
    }

    <br />
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Guardar</button>
        <button type="button" class="btn btn-light" @onclick="Cancel">Cancelar</button>
    </div>
</EditForm>

@code {

    [Parameter] public Expression<Func<string>> For { get; set; }

    private string label => GetDisplayName();

    private string confirmationMessage = "";

    private string GetDisplayName()
    {
        var expression = (MemberExpression)For.Body;
        var value = expression.Member.GetCustomAttribute(typeof(DisplayNameAttribute)) as DisplayNameAttribute;
        return value?.DisplayName ?? expression.Member.Name ?? "";
    }

    private AddGoalRequest model = new();

    protected async Task HandleSubmit()
    {        
        model.UserId = int.Parse(httpContextAccessor.HttpContext?.User.Claims.FirstOrDefault(c => c.Type == "userId")?.Value);

        var goalResponse = await _goalService.Create(model);

        if (goalResponse.Id != 0)
        {
            Cancel();
        }
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/goals/index");
    }
}