// <auto-generated />
using System;
using HealthyApp.Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthyApp.Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class _ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthyApp.Domain.Models.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Goals");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("HealthyApp.Domain.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Estás como Leonardo DiCaprio",
                            Name = "Beginner",
                            Number = 1,
                            Url = "https://m.media-amazon.com/images/M/MV5BMjI0MTg3MzI0M15BMl5BanBnXkFtZTcwMzQyODU2Mw@@.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Estás como Emma Stone",
                            Name = "Intermediate",
                            Number = 2,
                            Url = "https://m.media-amazon.com/images/M/MV5BMjI4NjM1NDkyN15BMl5BanBnXkFtZTgwODgyNTY1MjE@.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Estás como Chris Pratt",
                            Name = "Upper Intermediate",
                            Number = 3,
                            Url = "https://m.media-amazon.com/images/M/MV5BZjdkYjg1NzMtOTY2YS00ZWI1LWEwZWYtOTU1YTM2ODA2ZWY5XkEyXkFqcGdeQXVyMTM1MjAxMDc3.jpg"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Estás como Scarlett Johansson",
                            Name = "Advanced",
                            Number = 4,
                            Url = "https://m.media-amazon.com/images/M/MV5BMTM3OTUwMDYwNl5BMl5BanBnXkFtZTcwNTUyNzc3Nw@@.jpg"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Estás como Dwayne Johnson",
                            Name = "Skilled",
                            Number = 5,
                            Url = "https://m.media-amazon.com/images/M/MV5BMTkyNDQ3NzAxM15BMl5BanBnXkFtZTgwODIwMTQ0NTE@.jpg"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Estás como Angelina Jolie",
                            Name = "Expert",
                            Number = 6,
                            Url = ""
                        },
                        new
                        {
                            Id = 7,
                            Description = "Estás como Tom Hardy",
                            Name = "Elite",
                            Number = 7,
                            Url = ""
                        },
                        new
                        {
                            Id = 8,
                            Description = "Estás como Gal Gadot",
                            Name = "Grandmaster",
                            Number = 8,
                            Url = ""
                        },
                        new
                        {
                            Id = 9,
                            Description = "Estás como Chris Hemsworth",
                            Name = "Masterful",
                            Number = 9,
                            Url = ""
                        },
                        new
                        {
                            Id = 10,
                            Description = "Estás como Arnold Schwarzenegger",
                            Name = "Champion",
                            Number = 10,
                            Url = "https://m.media-amazon.com/images/M/MV5BMTI3MDc4NzUyMV5BMl5BanBnXkFtZTcwMTQyMTc5MQ@@.jpg"
                        });
                });

            modelBuilder.Entity("HealthyApp.Domain.Models.Progress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Progresses");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("HealthyApp.Domain.Models.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.ToTable("Rewards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Tenés descuento en tiendas D1",
                            Name = "Beginner"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Tenés descuento en tiendas Ara",
                            Name = "Intermediate"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Tenés descuento en tiendas Éxito",
                            Name = "Upper Intermediate"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Tenés descuento en tiendas Olympica",
                            Name = "Advanced"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Tenés descuento en tiendas Carulla",
                            Name = "Skilled"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Tenés descuento en tiendas Jumbo",
                            Name = "Expert"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Tenés descuento en tiendas Metro",
                            Name = "Elite"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Tenés descuento en tiendas SmartFit",
                            Name = "Grandmaster"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Tenés descuento en tiendas Adidas",
                            Name = "Masterful"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Tenés descuento en tiendas Decathlon",
                            Name = "Champion"
                        });
                });

            modelBuilder.Entity("HealthyApp.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AspNetUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.ToTable("HealthyUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HealthyApp.Domain.Models.DietGoal", b =>
                {
                    b.HasBaseType("HealthyApp.Domain.Models.Goal");

                    b.Property<int>("Kilograms")
                        .HasColumnType("int");

                    b.ToTable("DietGoals", (string)null);
                });

            modelBuilder.Entity("HealthyApp.Domain.Models.ExerciseGoal", b =>
                {
                    b.HasBaseType("HealthyApp.Domain.Models.Goal");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<int>("TimesPerFrequency")
                        .HasColumnType("int");

                    b.ToTable("ExercisesGoals", (string)null);
                });

            modelBuilder.Entity("HealthyApp.Domain.Models.DietProgress", b =>
                {
                    b.HasBaseType("HealthyApp.Domain.Models.Progress");

                    b.Property<int?>("DietGoalId")
                        .HasColumnType("int");

                    b.Property<int>("KilogramsLost")
                        .HasColumnType("int");

                    b.HasIndex("DietGoalId");

                    b.ToTable("DietProgresses", (string)null);
                });

            modelBuilder.Entity("HealthyApp.Domain.Models.ExerciseProgress", b =>
                {
                    b.HasBaseType("HealthyApp.Domain.Models.Progress");

                    b.Property<TimeSpan>("DurationInMinutes")
                        .HasColumnType("time");

                    b.Property<int?>("ExerciseGoalId")
                        .HasColumnType("int");

                    b.HasIndex("ExerciseGoalId");

                    b.ToTable("ExerciseProgresses", (string)null);
                });

            modelBuilder.Entity("HealthyApp.Domain.Models.Goal", b =>
                {
                    b.HasOne("HealthyApp.Domain.Models.User", "User")
                        .WithMany("Goals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthyApp.Domain.Models.Reward", b =>
                {
                    b.HasOne("HealthyApp.Domain.Models.Level", null)
                        .WithMany("Rewards")
                        .HasForeignKey("LevelId");
                });

            modelBuilder.Entity("HealthyApp.Domain.Models.User", b =>
                {
                    b.HasOne("HealthyApp.Domain.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthyApp.Domain.Models.DietGoal", b =>
                {
                    b.HasOne("HealthyApp.Domain.Models.Goal", null)
                        .WithOne()
                        .HasForeignKey("HealthyApp.Domain.Models.DietGoal", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthyApp.Domain.Models.ExerciseGoal", b =>
                {
                    b.HasOne("HealthyApp.Domain.Models.Goal", null)
                        .WithOne()
                        .HasForeignKey("HealthyApp.Domain.Models.ExerciseGoal", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthyApp.Domain.Models.DietProgress", b =>
                {
                    b.HasOne("HealthyApp.Domain.Models.DietGoal", null)
                        .WithMany("Progresses")
                        .HasForeignKey("DietGoalId");

                    b.HasOne("HealthyApp.Domain.Models.Progress", null)
                        .WithOne()
                        .HasForeignKey("HealthyApp.Domain.Models.DietProgress", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthyApp.Domain.Models.ExerciseProgress", b =>
                {
                    b.HasOne("HealthyApp.Domain.Models.ExerciseGoal", null)
                        .WithMany("Progresses")
                        .HasForeignKey("ExerciseGoalId");

                    b.HasOne("HealthyApp.Domain.Models.Progress", null)
                        .WithOne()
                        .HasForeignKey("HealthyApp.Domain.Models.ExerciseProgress", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthyApp.Domain.Models.Level", b =>
                {
                    b.Navigation("Rewards");
                });

            modelBuilder.Entity("HealthyApp.Domain.Models.User", b =>
                {
                    b.Navigation("Goals");
                });

            modelBuilder.Entity("HealthyApp.Domain.Models.DietGoal", b =>
                {
                    b.Navigation("Progresses");
                });

            modelBuilder.Entity("HealthyApp.Domain.Models.ExerciseGoal", b =>
                {
                    b.Navigation("Progresses");
                });
#pragma warning restore 612, 618
        }
    }
}
